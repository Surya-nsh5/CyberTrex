<<<<<<< HEAD
document.addEventListener('DOMContentLoaded', () => {
    // --- Elements ---
    const scanForm = document.getElementById('scan-form');
    const fileInput = document.getElementById('file-input');
    const urlInput = document.getElementById('url-input');
    const fileNameDisplay = document.getElementById('file-name');
    const scanButton = document.getElementById('scan-button');
    const resultsSection = document.getElementById('results-section');
    const progressIndicator = document.getElementById('progress-indicator');
    const resultOutput = document.getElementById('result-output');
    const defaultFileText = 'Upload File for Scanning';
    const placeholderTextElement = resultOutput.querySelector('.placeholder-text')?.cloneNode(true); // Clone the initial placeholder

    const themeToggleButton = document.getElementById('theme-toggle');
    const body = document.body;

    const navToggler = document.getElementById('nav-toggler');
    const navMenu = document.querySelector('.nav-menu');
    const navLinks = document.querySelectorAll('.nav-link'); // For closing menu on link click

    // --- Initial Setup ---
    // Apply saved theme on load
    const savedTheme = localStorage.getItem('theme') || 'dark-mode'; // Default to dark
    body.classList.add(savedTheme); // Apply class immediately
    // Update toggle button icon based on loaded theme
    updateThemeIcon(savedTheme === 'light-mode');

    // Set initial file input text
    fileNameDisplay.textContent = defaultFileText;

    // Initialize placeholder
    clearResults(true); // Pass true to force showing placeholder initially

    // --- Event Listeners ---

    // File Input Change
    fileInput.addEventListener('change', () => {
        if (fileInput.files.length > 0) {
            fileNameDisplay.textContent = fileInput.files[0].name;
            fileNameDisplay.style.color = 'var(--text-primary)';
            urlInput.value = ''; // Clear URL input if file is selected
        } else {
            fileNameDisplay.textContent = defaultFileText;
            fileNameDisplay.style.color = 'var(--text-secondary)';
        }
        clearResults(); // Clear results when input changes
    });

    // URL Input Change
    urlInput.addEventListener('input', () => {
        if (urlInput.value.trim() !== '') {
            // Clear file input visually (can't programmatically clear file list easily/reliably)
            fileInput.value = ''; // This mostly works but isn't perfect across browsers
            fileNameDisplay.textContent = defaultFileText;
            fileNameDisplay.style.color = 'var(--text-secondary)';
        }
        clearResults(); // Clear results when input changes
    });

    // Scan Form Submission
    scanForm.addEventListener('submit', (e) => {
        e.preventDefault();

        const file = fileInput.files.length > 0 ? fileInput.files[0] : null;
        const url = urlInput.value.trim();

        if (!file && !url) {
            displayResult("Please upload a file OR enter a URL.", "error");
            return;
        }

        let scanTarget;
        let isFileScan = false;

        if (file) {
            scanTarget = `File "${file.name}"`;
            isFileScan = true;
        } else {
            // Basic URL validation (more robust validation recommended for production)
            if (!isValidUrl(url)) {
                displayResult("Please enter a valid URL (e.g., https://example.com).", "error");
                return;
            }
            scanTarget = `URL "${url}"`;
        }

        // --- Start Simulated Scan ---
        clearResults();
        progressIndicator.style.display = 'flex';
        scanButton.disabled = true;
        scanButton.textContent = 'Scanning...';

        const scanTime = Math.random() * 2000 + 2000; // 2-4 seconds

        setTimeout(() => {
            // --- Finish Simulated Scan ---
            progressIndicator.style.display = 'none';
            scanButton.disabled = false;
            scanButton.innerHTML = 'Initiate Scan <span class="scan-icon">üõ°Ô∏è</span>';

            const randomOutcome = Math.random();

            if (randomOutcome < 0.65) {
                displayResult(`‚úÖ ${scanTarget} appears to be SAFE.`, "safe");
            } else if (randomOutcome < 0.85) {
                displayResult(`‚ö†Ô∏è ${scanTarget} is SUSPICIOUS. Proceed with caution.`, "warning");
            } else {
                displayResult(`üö® MALWARE DETECTED in ${scanTarget}! Quarantine recommended / Avoid visiting URL.`, "danger");
            }

            // Optionally clear inputs after scan
            // fileInput.value = ''; // Clear file input (visual part)
            // urlInput.value = ''; // Clear URL input
            // fileNameDisplay.textContent = defaultFileText;
            // fileNameDisplay.style.color = 'var(--text-secondary)';

        }, scanTime);
    });

    // Theme Toggle Button Click
    themeToggleButton.addEventListener('click', () => {
        const isLightMode = body.classList.toggle('light-mode');
        body.classList.toggle('dark-mode', !isLightMode); // Ensure only one class is active

        // Update icon and save preference
        updateThemeIcon(isLightMode);
        localStorage.setItem('theme', isLightMode ? 'light-mode' : 'dark-mode');
    });

    // Nav Toggler Click (for mobile)
    if (navToggler && navMenu) {
        navToggler.addEventListener('click', () => {
            navMenu.classList.toggle('active');
            navToggler.classList.toggle('active'); // For potential X animation
        });
    }

    // Close mobile menu when a nav link is clicked
    navLinks.forEach(link => {
        link.addEventListener('click', () => {
            if (navMenu.classList.contains('active')) {
                navMenu.classList.remove('active');
                navToggler.classList.remove('active');
            }
        });
    });

    // --- Contact Form Tabs ---
    const tabButtons = document.querySelectorAll('.tab-button');
    const formContainers = document.querySelectorAll('.form-container');

    tabButtons.forEach(button => {
        button.addEventListener('click', () => {
            // Deactivate all tabs and forms
            tabButtons.forEach(btn => btn.classList.remove('active'));
            formContainers.forEach(form => form.classList.remove('active'));

            // Activate the clicked tab and corresponding form
            button.classList.add('active');
            const tabId = button.dataset.tab;
            document.getElementById(tabId).classList.add('active');
        });
    });

    // --- Contact Form Submission ---
    const contactForm = document.getElementById('contact-form');

    if (contactForm) {
        contactForm.addEventListener('submit', (e) => {
            e.preventDefault();
            // Simulate sending a message
            alert('Message sent! (This is a simulation)');
            contactForm.reset(); // Clear the form
        });
    }

    // --- Helper Functions ---

    // Function to update theme toggle button icon
    function updateThemeIcon(isLightMode) {
        // Icons are handled by CSS hiding/showing based on body class now
        // No direct JS manipulation needed for the icons themselves
    }

    // Function to display results
    function displayResult(message, type) {
        resultOutput.innerHTML = ''; // Clear previous content
        const resultElement = document.createElement('p');
        resultElement.innerHTML = message;
        resultElement.className = `result-${type}`;
        resultOutput.appendChild(resultElement);
        resultsSection.style.display = 'flex'; // Use flex for consistency
    }

    // Function to clear results and optionally show placeholder
    function clearResults(showPlaceholder = false) {
        resultOutput.innerHTML = ''; // Clear previous result message
        if (showPlaceholder && placeholderTextElement) {
            resultOutput.appendChild(placeholderTextElement); // Add placeholder back
        } else if (showPlaceholder) {
            // Fallback if placeholder wasn't cloned correctly
            resultOutput.innerHTML = '<p class="placeholder-text">Upload a file or enter a URL and click \'Initiate Scan\'.</p>';
        }
        progressIndicator.style.display = 'none';
    }

    // Basic URL validation function
    function isValidUrl(string) {
        try {
            new URL(string);
            // Check for protocol presence as simple validation
            return string.startsWith('http://') || string.startsWith('https://');
        } catch (_) {
            return false;
        }
    }

=======
document.addEventListener('DOMContentLoaded', () => {
    // --- Elements ---
    const scanForm = document.getElementById('scan-form');
    const fileInput = document.getElementById('file-input');
    const urlInput = document.getElementById('url-input');
    const fileNameDisplay = document.getElementById('file-name');
    const scanButton = document.getElementById('scan-button');
    const resultsSection = document.getElementById('results-section');
    const progressIndicator = document.getElementById('progress-indicator');
    const resultOutput = document.getElementById('result-output');
    const defaultFileText = 'Upload File for Scanning';
    const placeholderTextElement = resultOutput.querySelector('.placeholder-text')?.cloneNode(true); // Clone the initial placeholder

    const themeToggleButton = document.getElementById('theme-toggle');
    const body = document.body;

    const navToggler = document.getElementById('nav-toggler');
    const navMenu = document.querySelector('.nav-menu');
    const navLinks = document.querySelectorAll('.nav-link'); // For closing menu on link click

    // --- Initial Setup ---
    // Apply saved theme on load
    const savedTheme = localStorage.getItem('theme') || 'dark-mode'; // Default to dark
    body.classList.add(savedTheme); // Apply class immediately
    // Update toggle button icon based on loaded theme
    updateThemeIcon(savedTheme === 'light-mode');

    // Set initial file input text
    fileNameDisplay.textContent = defaultFileText;

    // Initialize placeholder
    clearResults(true); // Pass true to force showing placeholder initially

    // --- Event Listeners ---

    // File Input Change
    fileInput.addEventListener('change', () => {
        if (fileInput.files.length > 0) {
            fileNameDisplay.textContent = fileInput.files[0].name;
            fileNameDisplay.style.color = 'var(--text-primary)';
            urlInput.value = ''; // Clear URL input if file is selected
        } else {
            fileNameDisplay.textContent = defaultFileText;
            fileNameDisplay.style.color = 'var(--text-secondary)';
        }
        clearResults(); // Clear results when input changes
    });

    // URL Input Change
    urlInput.addEventListener('input', () => {
        if (urlInput.value.trim() !== '') {
            // Clear file input visually (can't programmatically clear file list easily/reliably)
            fileInput.value = ''; // This mostly works but isn't perfect across browsers
            fileNameDisplay.textContent = defaultFileText;
            fileNameDisplay.style.color = 'var(--text-secondary)';
        }
        clearResults(); // Clear results when input changes
    });

    // Scan Form Submission
    scanForm.addEventListener('submit', (e) => {
        e.preventDefault();

        const file = fileInput.files.length > 0 ? fileInput.files[0] : null;
        const url = urlInput.value.trim();

        if (!file && !url) {
            displayResult("Please upload a file OR enter a URL.", "error");
            return;
        }

        let scanTarget;
        let isFileScan = false;

        if (file) {
            scanTarget = `File "${file.name}"`;
            isFileScan = true;
        } else {
            // Basic URL validation (more robust validation recommended for production)
            if (!isValidUrl(url)) {
                displayResult("Please enter a valid URL (e.g., https://example.com).", "error");
                return;
            }
            scanTarget = `URL "${url}"`;
        }

        // --- Start Simulated Scan ---
        clearResults();
        progressIndicator.style.display = 'flex';
        scanButton.disabled = true;
        scanButton.textContent = 'Scanning...';

        const scanTime = Math.random() * 2000 + 2000; // 2-4 seconds

        setTimeout(() => {
            // --- Finish Simulated Scan ---
            progressIndicator.style.display = 'none';
            scanButton.disabled = false;
            scanButton.innerHTML = 'Initiate Scan <span class="scan-icon">üõ°Ô∏è</span>';

            const randomOutcome = Math.random();

            if (randomOutcome < 0.65) {
                displayResult(`‚úÖ ${scanTarget} appears to be SAFE.`, "safe");
            } else if (randomOutcome < 0.85) {
                displayResult(`‚ö†Ô∏è ${scanTarget} is SUSPICIOUS. Proceed with caution.`, "warning");
            } else {
                displayResult(`üö® MALWARE DETECTED in ${scanTarget}! Quarantine recommended / Avoid visiting URL.`, "danger");
            }

            // Optionally clear inputs after scan
            // fileInput.value = ''; // Clear file input (visual part)
            // urlInput.value = ''; // Clear URL input
            // fileNameDisplay.textContent = defaultFileText;
            // fileNameDisplay.style.color = 'var(--text-secondary)';

        }, scanTime);
    });

    // Theme Toggle Button Click
    themeToggleButton.addEventListener('click', () => {
        const isLightMode = body.classList.toggle('light-mode');
        body.classList.toggle('dark-mode', !isLightMode); // Ensure only one class is active

        // Update icon and save preference
        updateThemeIcon(isLightMode);
        localStorage.setItem('theme', isLightMode ? 'light-mode' : 'dark-mode');
    });

    // Nav Toggler Click (for mobile)
    if (navToggler && navMenu) {
        navToggler.addEventListener('click', () => {
            navMenu.classList.toggle('active');
            navToggler.classList.toggle('active'); // For potential X animation
        });
    }

    // Close mobile menu when a nav link is clicked
    navLinks.forEach(link => {
        link.addEventListener('click', () => {
            if (navMenu.classList.contains('active')) {
                navMenu.classList.remove('active');
                navToggler.classList.remove('active');
            }
        });
    });

    // --- Contact Form Tabs ---
    const tabButtons = document.querySelectorAll('.tab-button');
    const formContainers = document.querySelectorAll('.form-container');

    tabButtons.forEach(button => {
        button.addEventListener('click', () => {
            // Deactivate all tabs and forms
            tabButtons.forEach(btn => btn.classList.remove('active'));
            formContainers.forEach(form => form.classList.remove('active'));

            // Activate the clicked tab and corresponding form
            button.classList.add('active');
            const tabId = button.dataset.tab;
            document.getElementById(tabId).classList.add('active');
        });
    });

    // --- Contact Form Submission ---
    const contactForm = document.getElementById('contact-form');

    if (contactForm) {
        contactForm.addEventListener('submit', (e) => {
            e.preventDefault();
            // Simulate sending a message
            alert('Message sent! (This is a simulation)');
            contactForm.reset(); // Clear the form
        });
    }

    // --- Helper Functions ---

    // Function to update theme toggle button icon
    function updateThemeIcon(isLightMode) {
        // Icons are handled by CSS hiding/showing based on body class now
        // No direct JS manipulation needed for the icons themselves
    }

    // Function to display results
    function displayResult(message, type) {
        resultOutput.innerHTML = ''; // Clear previous content
        const resultElement = document.createElement('p');
        resultElement.innerHTML = message;
        resultElement.className = `result-${type}`;
        resultOutput.appendChild(resultElement);
        resultsSection.style.display = 'flex'; // Use flex for consistency
    }

    // Function to clear results and optionally show placeholder
    function clearResults(showPlaceholder = false) {
        resultOutput.innerHTML = ''; // Clear previous result message
        if (showPlaceholder && placeholderTextElement) {
            resultOutput.appendChild(placeholderTextElement); // Add placeholder back
        } else if (showPlaceholder) {
            // Fallback if placeholder wasn't cloned correctly
            resultOutput.innerHTML = '<p class="placeholder-text">Upload a file or enter a URL and click \'Initiate Scan\'.</p>';
        }
        progressIndicator.style.display = 'none';
    }

    // Basic URL validation function
    function isValidUrl(string) {
        try {
            new URL(string);
            // Check for protocol presence as simple validation
            return string.startsWith('http://') || string.startsWith('https://');
        } catch (_) {
            return false;
        }
    }

>>>>>>> b775683 (Front End Added)
});